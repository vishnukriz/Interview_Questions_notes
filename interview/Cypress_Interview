**Cypress Questions**
--
1) Delete the text and type Random in textbox
cy.get('#id1').clear().type("testing")

2) Type any text and press enter in keyboard in textbox
cy.get('#id2').type("test{enter}")

3) Select option4 in dropdown
cy.get('select#id3').select('Option4')

4) Unselect the check box1 and select checkbox2 and checkbox3
cy.xpath("//input[@name = 'check1']).uncheck();
cy.xpath("//input[@type = 'checkbox']).check(['CheckBox2', 'CheckBox3']);

5) Verify this text contain "Automation testing"
cy.contain("Automation testing").should('exist')

6) Verify below number is less than 10
cy.contains("100").should("be.lessthan", 60)

7) Click on bottommost right corner on below box
cy.get('#mycanvas').click('bottomRight')

8) there is an element below. verify the element is not visible in screen
cy.get('#someid').should('not.be.visible')

9) Verify below element is visible and verify text to assertMyPresence by chainable command textbox(assertMyPresence)
cy.get('#randomid').should('be.visible')
// cy.get('#randomid').should('have.text', 'assertMyPresence')

10) type some text in second textbox              has context menu
cy.xpath("//input[@type = 'text'].eq(1).type("work test")
--

11) defaultTimeout: Cypress has default timeout for cypress comments and assertions, (i.e 4000 milliseconds) and specified in cypress.config file
we can also change in spec file using {timeout:5000} 
eg: cy.get(".class", { timeout: 30000 });

12) JSON
13) cy.intercept()
14) set env variable:  we have set the env variable in cypress.config file 
import { defineconfig } from cypress;

export default defineconfig ({
  env: {
    user : "Test",
    pass : "123@45"
  }
});
we can use in the spec file like:
loginpage.signin(Cypress.env("user"));
    
15) custom commands - read excel file

16) cypress command - to run the script in Chrome browser and in handed mode:
npx cypress open - Test run
npx cypress run  --browser chrome  --spec "path of the spec file"
npx cypress run --headed --spec "path of the spec file"

17) alias
18) access keyboard key in cypress:
cy.get("loc").type({enter});
             .type({backspace});
             .type({shift});
             .type({alt+shift)};
whatever keys we want to use, need to insert via type like cy.get("#test").type({selectAll});




**JavaScript Program:**
--
1) declare an array and find 3rd largest number in an array
function largestNumber() {
 let arr = [56, 3, 98, 5, 66];

 for(let i=1;i<arr.length;i++){
   for(let j=0;j<i+1;j++){
     if(arr[i]>arr[j]){
       [arr[i], arr[j]] = [arr[j], arr[i]]
    }
  }
 }
 console.log(arr);
 console.log("3rd largest number:"+ arr[2]);
}
largestNumber();

2) Find Experience (in yrs) > 3
let a=[
    {
        "name": "Employee1",
        "Employer": "AclDigital",
        "Experience (in yrs)": 2
    },
    {
        "name": "Employee2",
        "Employer": "AclDigital",
        "Experience (in yrs)": 3
    },
    {
        "name": "Employee3",
        "Employer": "Siemens",
        "Experience (in yrs)": 6
    },
    {
        "name": "Employee4",
        "Employer": "Siemens",
        "Experience (in yrs)": 3
    },
    {
        "name": "Employee5",
        "Employer": "Siemens",
        "Experience (in yrs)": 4
    },
    {
        "name": "Employee6",
        "Employer": "Siemens",
        "Experience (in yrs)": 2
    }
]

Answer: 
let exp = a.filter(el => 
  el["Experience (in yrs)"] > 3);
console.log(exp);


3) Find the index of 6:
let a = [4,5,6,8]
a.indexOf(2);

4) Difference between let and var:
 Both keywords are used to declare variables in javaScript.The difference between var and let are in the scope of the variables we created,
 Variables declared by let are only avaialble inside the block where they definied
 Variables declared by var are available throughout the function where they are defined.
 eg 1: function varScoping() {
  var x = 1;

  if (true) {
    var x = 2;
    console.log(x); // will print 2
  }

  console.log(x); // will print 2
}

function letScoping() {
  let x = 1;

  if (true) {
    let x = 2;
    console.log(x); // will print 2
  }

  console.log(x); // will print 1
}

eg 2: 
// Global variables
var x = 1;
let y = 2;
console.log(this.x); // will print 1
console.log(this.y); // will print undefined










