**program questions**
--
1) Declare a string {2,3,4,s,t,u} with alpha numeric and get result as {s:2, t:3, u:4}


**Selenium Questions**:
https://www.testgorilla.com/blog/tricky-selenium-interview-questions-answers/
https://www.geeksforgeeks.org/selenium-interview-questions/#selenium-interview-questions-for-freshers
https://rahulshettyacademy.com/blog/index.php/selenium-webdriver-with-java-interview-questions/
--
2) Handling Dropdowm without select class
3) Crossbrowser testing
4) bug release
5) multiple windows handling
6) mouse and touch events
7) selenium architecture/components
8) Testng framework - explain
9) cucumber framework - features
10) how to get screenshot in selenium
11) d/b scenario and scenario outline
12) multi selection in dropdown
13) fluent wait, explict wait
14) webdriver and remote driver
15) backgound keyword
16) selenium 3 and selenium 4
17) get all options in dropdown
18) Assertions
19) How do you use XPath in Selenium testing
20) How do you upload a file using Selenium WebDriver


======================================
1. Manage iframe in Selenium webdriver: Iframe is an element of HTML that puts another webpage within the parent page.
driver.switchTo().frame("ID");
driver.switchTo().frame(0);
driver.switchTo().frame(driver.findElements(By.tagName(“iframe”).get(0));
driver.switchTo().defaultContent()

2. Robot class is a Java-based utility class that lets the tester  automate tasks that can’t be done using Selenium’s built-in methods (mouse intractions)

3. Selenium navigation commands:
navigate().forward(); - moves to next page
naviagte().back(); - moves to previous page
navigate().refresh() - reload the page
navigate().to() - opens new web page

4. difference between driver.close() and driver.quit() commands:
driver.close() - closes the current tab/window
driver.quit() - closes all the windows

5. differences between driver.findElement() and driver.findElements() :
driver.findElement() - returns first matching element of the passed locator
driver.findElements() - returns the list of elements that matches the locator

6. POM - Page object model is a design pattern where we can create separate classes to represent each web page in the application.
These classes encapsulates the web elements and intractions, which makes tests more readable, maintainable and reducting te dupliaction of the code.

7. Difference between getText() and getAttribute() in Selenium:
getText() - provides the visible text of the web Element
getAttribute() - provides the value of the particular HTML attribute
Eg: <h3 title=”HTML Attributes”> ATTRIBUTES </h3>
In the above example, the h3 tag has an attribute with the property name as "title" and property value as "HTML Attributes".

8. Handle dynamic elements that change attributes or IDs on each page load: we can use robust locators like Xpath or CSS selectors based on stable attaribute 
or parent elements. This ensure a reliable way to locate elements even if ID or attribute changes.

24. difference between getWindowHandle() and getWindowHandles():
getWindowHandle() - returns the unique handle of the currently focused window or tab
getWindowHandles() - returns a set of all open window handles. Used when dealing with multiple windows or tabs, allowing easy switching between them.
set: It will set the window handles in the form of string. set<string> set= driver.getwindowhandles();
switch to: This function is used to switch between the windows.
action: This methods helps to do actions to windows.

9. *Handling Dropdown*
1) using Select class
 options: selectByIndex, selectByvalue, selectByvisibleText
eg:   WebElement  testDropdown = driver.findElement(By.id("locator"));
      Select drop = new Select(testDropdown);
      drop.selectByinder(5);
2) without Select class: we can obtain using Action class, sendKeys, JavaScript Executor class.
eg: driver.findElement(By.id("loc")).sendKeys("option name");

WebElement  testDropdown1 = driver.findElement(By.id("locator")); 
JavaScriptExecutor js = (JavaScriptExecutor) driver;
js.executeScript("arguments[0].value='option'", testDropdown1);

10. Crossbrowser testing: is a type of non-functional testing that let us to check whether website works as intended when asscessed using different 
    OS combination - different browsers and OS.

11. Bug Release: Bug release is when the software or an application is handed over to the testing team knowing that the defect is present in a release. 
During this, the priority and severity of bug are low, as the bug can be removed before the final handover

